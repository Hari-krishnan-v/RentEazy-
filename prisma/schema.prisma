generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  HOST
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  CARD
  UPI
  WALLET
  NETBANKING
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  name         String?
  firstname    String?
  lastname     String?
  password     String
  role         Role          @default(USER)
  avatarUrl    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Profiles
  hostProfile  HostProfile?
  userProfile  UserProfile?
}

model HostProfile {
  id         String       @unique
  user           User         @relation(fields: [id], references: [id])
  companyName      String?
  kycDocument      String?
  gstNumber        String?
  phone            String?
  altPhone         String?
  location         String?
  bio              String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Host owns properties
  properties       Property[]

  // Payments received by host
  paymentsReceived Payment[]     @relation("HostPayments")
}

model UserProfile {
  id         String       @unique
  user           User         @relation(fields: [id], references: [id])
  phone          String?
  altPhone       String?
  location       String?
  bio            String?
  budgetRange    String?
  rentalHistory  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Tenant-specific relations
  bookings       Booking[]    @relation("TenantBookings")
  paymentsSent   Payment[]    @relation("TenantPayments")
}

model Property {
  id             String       @id @default(uuid())
  title          String
  description    String
  price          Float
  landmark       String
  city           String
  state          String
  country        String
  pincode        String
  images         String[]
  hostProfile    HostProfile  @relation(fields: [hostProfileId], references: [id])
  hostProfileId  String
  bookings       Booking[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Booking {
  id             String       @id @default(uuid())
  tenantProfile  UserProfile  @relation("TenantBookings", fields: [tenantProfileId], references: [id])
  tenantProfileId String
  property       Property     @relation(fields: [propertyId], references: [id])
  propertyId     String
  startDate      DateTime
  endDate        DateTime
  totalPrice     Float
  payment        Payment?
  status         BookingStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Payment {
  id             String        @id @default(uuid())
  booking        Booking       @relation(fields: [bookingId], references: [id])
  bookingId      String        @unique

  // Who paid (tenant via UserProfile)
  sender         UserProfile   @relation("TenantPayments", fields: [senderId], references: [id])
  senderId       String

  // Who received (host via HostProfile)
  receiver       HostProfile   @relation("HostPayments", fields: [receiverId], references: [id])
  receiverId     String

  amount         Float
  method         PaymentMethod
  status         PaymentStatus @default(PENDING)
  paidAt         DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
