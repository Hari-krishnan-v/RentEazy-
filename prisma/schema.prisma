generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  HOST
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  firstname String?
  lastname  String?
  password  String
  role      Role     @default(USER)
  bio       String?
  phone     String?
  altphone  String?
  avatarUrl String?
  location  String?
  properties Property[]
  bookings  Booking[]
  payments  Payment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Property {
  id          String     @id @default(uuid())
  title       String
  description String
  price       Float
  location    String
  image       String?
  host        User       @relation(fields: [hostId], references: [id])
  hostId      String
  bookings    Booking[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Booking {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  property    Property   @relation(fields: [propertyId], references: [id])
  propertyId  String
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  payment     Payment?
  status      BookingStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}


enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Payment {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String
  booking    Booking    @relation(fields: [bookingId], references: [id])
  bookingId  String     @unique
  amount     Float
  method     PaymentMethod
  status     PaymentStatus @default(PENDING)
  paidAt     DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

enum PaymentMethod {
  CARD
  UPI
  WALLET
  NETBANKING
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}
